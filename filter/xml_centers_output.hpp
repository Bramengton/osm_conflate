/*

This file is based on xml_output_format.hpp from the Osmium library
(http://osmcode.org/libosmium).

Copyright 2013-2017 Jochen Topf <jochen@topf.org> and others (see README).
Copyright 2017 Ilya Zverev <ilya@zverev.info>, MAPS.ME

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/io/detail/string_util.hpp>
#include <osmium/osm/box.hpp>
#include <osmium/osm/item_type.hpp>
#include <osmium/osm/location.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/node_ref.hpp>
#include <osmium/osm/object.hpp>
#include <osmium/osm/relation.hpp>
#include <osmium/osm/tag.hpp>
#include <osmium/osm/timestamp.hpp>
#include <osmium/osm/types.hpp>
#include <osmium/osm/way.hpp>

#include <iterator>
#include <memory>
#include <string>
#include <utility>

namespace osmium {

    namespace io {

        namespace xmlcenters {

            namespace detail {

                inline void append_lat_lon_attributes(std::string& out, const char* lat, const char* lon, const osmium::Location& location) {
                    out += ' ';
                    out += lat;
                    out += "=\"";
                    osmium::detail::append_location_coordinate_to_string(std::back_inserter(out), location.y());
                    out += "\" ";
                    out += lon;
                    out += "=\"";
                    osmium::detail::append_location_coordinate_to_string(std::back_inserter(out), location.x());
                    out += "\"";
                }

            } // namespace detail

            class XMLCentersOutput {

                std::shared_ptr<std::string> m_out;

                inline void append_xml_encoded_string(std::string & out, const char *data) {
                    osmium::io::detail::append_xml_encoded_string(out, data);
                }

                void output_int(int64_t value) {
                    if (value < 0) {
                        *m_out += '-';
                        value = -value;
                    }

                    char temp[20];
                    char *t = temp;
                    do {
                        *t++ = char(value % 10) + '0';
                        value /= 10;
                    } while (value > 0);

                    const auto old_size = m_out->size();
                    m_out->resize(old_size + (t - temp));
                    char* data = &(*m_out)[old_size];
                    do {
                        *data++ += *--t;
                    } while (t != temp);
                }

                void write_spaces(int num) {
                    for (; num != 0; --num) {
                        *m_out += ' ';
                    }
                }

                void write_prefix() {
                    write_spaces(2);
                }

                template <typename T>
                void write_attribute(const char* name, T value) {
                    *m_out += ' ';
                    *m_out += name;
                    *m_out += "=\"";
                    output_int(value);
                    *m_out += '"';
                }

                void write_meta(const osmium::OSMObject& object) {
                    write_attribute("id", object.id());

                    if (object.version()) {
                        write_attribute("version", object.version());
                    }

                    if (object.timestamp()) {
                        *m_out += " timestamp=\"";
                        *m_out += object.timestamp().to_iso();
                        *m_out += "\"";
                    }

                    if (!object.user_is_anonymous()) {
                        write_attribute("uid", object.uid());
                        *m_out += " user=\"";
                        append_xml_encoded_string(*m_out, object.user());
                        *m_out += "\"";
                    }

                    if (object.changeset()) {
                        write_attribute("changeset", object.changeset());
                    }
                }

                void write_tags(const osmium::TagList& tags) {
                    for (const auto& tag : tags) {
                        write_spaces(2);
                        *m_out += "  <tag k=\"";
                        append_xml_encoded_string(*m_out, tag.key());
                        *m_out += "\" v=\"";
                        append_xml_encoded_string(*m_out, tag.value());
                        *m_out += "\"/>\n";
                    }
                }

            public:

                XMLCentersOutput() : m_out(std::make_shared<std::string>()) {
                }

                std::string apply(osmium::OSMObject const & item, osmium::Location const & center) {
                    switch(item.type()) {
                        case osmium::item_type::node:
                            node(static_cast<const osmium::Node&>(item));
                            break;
                        case osmium::item_type::way:
                            way(static_cast<const osmium::Way&>(item), center);
                            break;
                        case osmium::item_type::relation:
                            relation(static_cast<const osmium::Relation&>(item), center);
                            break;
                        default:
                            throw osmium::unknown_type{};
                    }

                    std::string out;
                    using std::swap;
                    swap(out, *m_out);

                    return out;
                }

                void node(const osmium::Node& node) {
                    write_prefix();
                    *m_out += "<node";

                    write_meta(node);

                    if (node.location()) {
                        detail::append_lat_lon_attributes(*m_out, "lat", "lon", node.location());
                    }

                    if (node.tags().empty()) {
                        *m_out += "/>\n";
                        return;
                    }

                    *m_out += ">\n";

                    write_tags(node.tags());

                    write_prefix();
                    *m_out += "</node>\n";
                }

                void way(const osmium::Way& way, osmium::Location const & center) {
                    write_prefix();
                    *m_out += "<way";
                    write_meta(way);

                    if (way.tags().empty() && way.nodes().empty()) {
                        *m_out += "/>\n";
                        return;
                    }

                    *m_out += ">\n";

                    write_prefix();
                    *m_out += "  <center";
                    detail::append_lat_lon_attributes(*m_out, "lat", "lon", center);
                    *m_out += "/>\n";

                    for (const auto& node_ref : way.nodes()) {
                        write_prefix();
                        *m_out += "  <nd";
                        write_attribute("ref", node_ref.ref());
                        *m_out += "/>\n";
                    }

                    write_tags(way.tags());

                    write_prefix();
                    *m_out += "</way>\n";
                }

                void relation(const osmium::Relation& relation, osmium::Location const & center) {
                    write_prefix();
                    *m_out += "<relation";
                    write_meta(relation);

                    if (relation.tags().empty() && relation.members().empty()) {
                        *m_out += "/>\n";
                        return;
                    }

                    *m_out += ">\n";

                    write_prefix();
                    *m_out += "  <center";
                    detail::append_lat_lon_attributes(*m_out, "lat", "lon", center);
                    *m_out += "/>\n";

                    for (const auto& member : relation.members()) {
                        write_prefix();
                        *m_out += "  <member type=\"";
                        *m_out += item_type_to_name(member.type());
                        *m_out += '"';
                        write_attribute("ref", member.ref());
                        *m_out += " role=\"";
                        append_xml_encoded_string(*m_out, member.role());
                        *m_out += "\"/>\n";
                    }

                    write_tags(relation.tags());

                    write_prefix();
                    *m_out += "</relation>\n";
                }

            }; // class XMLCentersOutputBlock

        } // namespace xmlcenters

    } // namespace io

} // namespace osmium
